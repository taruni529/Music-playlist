#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the Node structure for the linked list
struct Node {
    char songTitle[100];
    struct Node* next;
};

// Function to create a new node with a song title
struct Node* createNode(const char* title) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    strcpy(newNode->songTitle, title);
    newNode->next = NULL;
    return newNode;
}

// Function to add a song to the end of the playlist
void addSong(struct Node** head, const char* title) {
    struct Node* newNode = createNode(title);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    printf("Added: %s\n", title);
}

// Function to remove a song by title
void removeSong(struct Node** head, const char* title) {
    if (*head == NULL) {
        printf("Playlist is empty.\n");
        return;
    }
    struct Node* temp = *head;
    struct Node* prev = NULL;
    while (temp != NULL && strcmp(temp->songTitle, title) != 0) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Song not found: %s\n", title);
        return;
    }
    if (prev == NULL) {
        *head = temp->next;
    } else {
        prev->next = temp->next;
    }
    free(temp);
    printf("Removed: %s\n", title);
}

// Function to display all songs in the playlist
void displayPlaylist(struct Node* head) {
    if (head == NULL) {
        printf("Playlist is empty.\n");
        return;
    }
    printf("Playlist:\n");
    struct Node* temp = head;
    while (temp != NULL) {
        printf("- %s\n", temp->songTitle);
        temp = temp->next;
    }
}

// Function to free all nodes in the playlist
void freePlaylist(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct Node* playlist = NULL;
    int choice;
    char title[100];

    do {
        printf("\n--- Music Playlist Manager ---\n");
        printf("1. Add Song\n");
        printf("2. Remove Song\n");
        printf("3. Show All Songs\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // to consume the newline character left by scanf

        switch (choice) {
            case 1:
                printf("Enter song title to add: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = '\0'; // remove newline character
                addSong(&playlist, title);
                break;
            case 2:
                printf("Enter song title to remove: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = '\0'; // remove newline character
                removeSong(&playlist, title);
                break;
            case 3:
                displayPlaylist(playlist);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);

    freePlaylist(playlist);
    return 0;
}